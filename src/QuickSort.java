import java.util.ArrayList;import java.util.Collections;public class QuickSort {    public static  <T extends Comparable<T>> void sort(ArrayList<T> arr) {        sort(arr, 0, arr.size() - 1);    }    private static <T extends Comparable<T>> void sort(ArrayList<T> arr, int s, int e) {        if (s < e) {            int part = partition(arr, s, e);            sort(arr, s, part - 1);            sort(arr, part + 1, e);        }    }    private static <T extends Comparable<T>> int partition(ArrayList<T> arr, int s, int e) {        T pivot = arr.get(e);        int i = s - 1;        for (int j = s; j < e; j++) {            // If current element is smaller than or            // equal to pivot            if (arr.get(j).compareTo(pivot) <= 0) {                i++;                Collections.swap(arr, i, j);            }        }        // swap arr[i+1] and arr[high] (or pivot)        Collections.swap(arr, i + 1, e);        return i + 1;    }}